

import argparse
import sys
import os

# Dynamically adjust import path if running as a script
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
if script_dir not in sys.path:
    sys.path.insert(0, script_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

try:
    from scripts.make_personas import make_personas
    from scripts.make_city import make_city
except ModuleNotFoundError:
    # Fallback for direct script execution
    from make_personas import make_personas
    from make_city import make_city

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--city', default='Lumi√®re')
    parser.add_argument('--personas', default='configs/personas.yaml')
    parser.add_argument('--city_out', default='configs/city.yaml')
    parser.add_argument('--num_personas', type=int, default=20)
    parser.add_argument('--seed', type=int, default=42)
    parser.add_argument('--start_year', type=int, default=1900)
    args = parser.parse_args()

    # Step 1: Generate default city places based on time period
    city_places = []
    if args.start_year < 1850:
        city_places = [
            f"{args.city} Town Hall", f"{args.city} Market Square", f"{args.city} Church", f"{args.city} Blacksmith Shop", f"{args.city} Schoolhouse",
            f"{args.city} General Store", f"{args.city} Bakery", f"{args.city} Tavern", f"{args.city} Stables", f"{args.city} Apothecary"
        ]
    elif args.start_year < 1920:
        city_places = [
            f"{args.city} City Hall", f"{args.city} Central Park", f"{args.city} Library", f"{args.city} General Hospital", f"{args.city} Elementary School",
            f"{args.city} Police Station", f"{args.city} Community Center", f"{args.city} Main Bakery", f"{args.city} Restaurant", f"{args.city} Public Bath"
        ]
    else:
        city_places = [
            f"{args.city} City Hall", f"{args.city} Central Park", f"{args.city} Library", f"{args.city} General Hospital", f"{args.city} Elementary School",
            f"{args.city} Police Station", f"{args.city} Community Center", f"{args.city} Main Bakery", f"{args.city} Popular Restaurant", f"{args.city} Public Pool"
        ]

    # Step 2: Generate personas using city places
    print("[make_world] Generating personas...")
    make_personas(city=args.city, n=args.num_personas, out=args.personas, seed=args.seed, places=city_places)

    # Step 3: Generate city using personas
    print("[make_world] Generating city...")
    make_city(personas_path=args.personas, city=args.city, out=args.city_out)

    # Step 4: Write world.yaml with start_year and comment
    world_yaml_path = os.path.join(project_root, "configs", "world.yaml")
    import yaml
    from datetime import datetime
    comment = f"# Generated by make_world.py on {datetime.now().strftime('%Y-%m-%d')}\n"
    world_data = {"city": args.city, "start_year": args.start_year}
    with open(world_yaml_path, "w", encoding="utf-8") as f:
        f.write(comment)
        yaml.safe_dump(world_data, f, sort_keys=False)
    print(f"[make_world] Set start_year to {args.start_year} in {world_yaml_path}")

    # Step 5: Output summary report
    import yaml
    with open(args.city_out, "r", encoding="utf-8") as f:
        city_data = yaml.safe_load(f)
    with open(args.personas, "r", encoding="utf-8") as f:
        personas_data = yaml.safe_load(f)
    num_places = len(city_data.get("places", []))
    num_connections = len(city_data.get("connections", []))
    num_personas = len(personas_data.get("people", []))
    print("[make_world] Summary Report:")
    print(f"  Places: {num_places}")
    print(f"  Connections: {num_connections}")
    print(f"  Personas: {num_personas}")
    print("[make_world] World generation complete.")

if __name__ == "__main__":
    main()
